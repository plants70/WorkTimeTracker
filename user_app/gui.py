import sys
import os
import logging
from pathlib import Path
from datetime import datetime, timedelta
from typing import Optional, Callable
import threading

PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

from config import STATUSES, STATUS_GROUPS, MAX_COMMENT_LENGTH
from sheets_api import sheets_api
from user_app.db_local import LocalDB, LocalDBError

try:
    from sync.notifications import Notifier
except ImportError:
    try:
        from .sync.notifications import Notifier
    except ImportError:
        from notifications import Notifier

from PyQt5.QtWidgets import (
    QWidget, QLabel, QPushButton, QVBoxLayout,
    QHBoxLayout, QMessageBox, QTextEdit,
    QSizePolicy, QApplication
)
from PyQt5.QtCore import QTimer, Qt, pyqtSignal
from PyQt5.QtGui import QFont, QPixmap, QIcon

logger = logging.getLogger(__name__)

class EmployeeApp(QWidget):
    status_changed = pyqtSignal(str)
    app_closed = pyqtSignal(str)
    notification_requested = pyqtSignal(str, str)

    def __init__(
        self,
        email: str,
        name: str,
        role: str = "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
        group: str = "",
        shift_hours: str = "8 —á–∞—Å–æ–≤",
        telegram_login: str = "",
        on_logout_callback: Optional[Callable] = None,
        session_id: Optional[str] = None,
        login_was_performed: bool = True
    ):
        super().__init__()
        self.email = email
        self.name = name
        self.role = role
        self.group = group
        self.shift_hours = shift_hours
        self.telegram_login = telegram_login
        self.on_logout_callback = on_logout_callback

        self.current_status = "–í —Ä–∞–±–æ—Ç–µ"
        self.status_start_time = datetime.now()
        self.shift_start_time = datetime.now()
        self.last_sync_time = None
        self.shift_ended = False

        # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: None, "admin_logout", "user_close", "auto_logout"
        self._closing_reason = None

        if session_id is not None:
            self.session_id = session_id
            self._continue_existing_session = True
        else:
            self.session_id = self._generate_session_id()
            self._continue_existing_session = False
        self.status_buttons = {}

        self.login_was_performed = login_was_performed

        self.notification_requested.connect(self._show_notification)

        self._init_db()
        self._init_ui()
        self._init_timers()
        self._init_shift_check_timer()

    def _show_notification(self, title: str, message: str):
        Notifier.show(title, message)

    def get_user(self):
        return {
            "Email": self.email,
            "Name": self.name,
            "Role": self.role,
            "Telegram": self.telegram_login,
            "ShiftHours": self.shift_hours,
            "Group": self.group,
        }

    def _generate_session_id(self) -> str:
        return f"{self.email[:8]}_{datetime.now().strftime('%Y%m%d%H%M%S')}"

    def _make_action_payload_from_row(self, row):
        # –ü–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ logs:
        # 0:id 1:session_id 2:email 3:name 4:status 5:action_type 6:comment
        # 7:timestamp 8:synced 9:sync_attempts 10:last_sync_attempt 11:priority
        # 12:status_start_time 13:status_end_time 14:reason 15:user_group
        return {
            "session_id": row[1],
            "email": row[2],
            "name": row[3],
            "status": row[4],
            "action_type": row[5],
            "comment": row[6],
            "timestamp": row[7],
            "status_start_time": row[12],
            "status_end_time": row[13],
            "reason": row[14] if len(row) > 14 else None,
        }

    def _send_action_to_sheets(self, record_id, user_group=None):
        threading.Thread(target=self._send_action_to_sheets_worker, args=(record_id, user_group), daemon=True).start()

    def _send_action_to_sheets_worker(self, record_id, user_group=None):
        try:
            row = self.db.get_action_by_id(record_id)
            if not row:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å —Å id={record_id} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Sheets")
                return

            action = self._make_action_payload_from_row(row)
            # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ actions (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π), –∑–∞—Ç–µ–º email
            ok = sheets_api.log_user_actions([action], action["email"], user_group=user_group or self.group)
            if ok:
                self.db.mark_actions_synced([record_id])
            else:
                logger.warning("Sheets: log_user_actions –≤–µ—Ä–Ω—É–ª False ‚Äî –æ—Å—Ç–∞–≤–ª—è—é –∑–∞–ø–∏—Å—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ Google Sheets: {e}")
            self.notification_requested.emit(
                "–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º",
                "–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞."
            )

    def _finish_and_send_previous_status(self):
        prev_id = self.db.finish_last_status(self.email, self.session_id)
        if prev_id:
            threading.Thread(target=self._finish_and_send_previous_status_worker, args=(prev_id,), daemon=True).start()

    def _finish_and_send_previous_status_worker(self, prev_id):
        row = self.db.get_action_by_id(prev_id)
        if not row:
            return
        try:
            action = self._make_action_payload_from_row(row)
            ok = sheets_api.log_user_actions([action], action["email"], user_group=self.group)
            if ok:
                self.db.mark_actions_synced([prev_id])
            else:
                logger.warning("Sheets: log_user_actions –≤–µ—Ä–Ω—É–ª False ‚Äî –æ—Å—Ç–∞–≤–ª—è—é –∑–∞–ø–∏—Å—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ Sheets: {e}")
            self.notification_requested.emit(
                "–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º",
                "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ."
            )

    def _init_db(self):
        try:
            self.db = LocalDB()
            if self.login_was_performed:
                now = datetime.now().isoformat()
                record_id = self.db.log_action(
                    email=self.email,
                    name=self.name,
                    status=self.current_status,
                    action_type="LOGIN",
                    comment="–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã",
                    immediate_sync=False,
                    session_id=self.session_id,
                    status_start_time=now,
                    status_end_time=None,
                    reason=None
                )
                self.status_start_time = datetime.fromisoformat(now)
                self._send_action_to_sheets(record_id)
        except LocalDBError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            raise

    def _init_ui(self):
        self.setWindowTitle("üïì –£—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        self.setWindowIcon(QIcon(str(Path(__file__).parent / "sberhealf.png")))
        self.resize(500, 440)
        self.setMinimumSize(400, 350)

        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(15, 15, 15, 15)
        main_layout.setSpacing(15)

        header_layout = QHBoxLayout()
        logo_label = QLabel()
        logo_path = Path(__file__).parent / "sberhealf.png"
        if logo_path.exists():
            pixmap = QPixmap(str(logo_path))
            pixmap = pixmap.scaled(180, 80, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            logo_label.setPixmap(pixmap)
        header_layout.addWidget(logo_label)

        title_label = QLabel("–£—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        title_label.setStyleSheet("font-size: 18px; font-weight: bold;")
        header_layout.addWidget(title_label, alignment=Qt.AlignCenter)
        main_layout.addLayout(header_layout)

        self.info_label = QLabel()
        self.info_label.setStyleSheet("QLabel { background-color: #f5f5f5; border-radius: 5px; padding: 10px; }")
        self._update_info_text()
        main_layout.addWidget(self.info_label)

        self.comment_input = QTextEdit()
        self.comment_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
        self.comment_input.setMaximumHeight(80)
        self.comment_input.setStyleSheet("QTextEdit { border: 1px solid #ddd; border-radius: 5px; padding: 5px; }")
        main_layout.addWidget(self.comment_input)

        self.time_label = QLabel("‚è± –í—Ä–µ–º—è –≤ —Å—Ç–∞—Ç—É—Å–µ: 00:00:00")
        self.time_label.setAlignment(Qt.AlignCenter)
        self.time_label.setStyleSheet("font-size: 14px;")
        main_layout.addWidget(self.time_label)

        self.shift_timer_label = QLabel("‚è∞ –í—Ä–µ–º—è —Å–º–µ–Ω—ã: 00:00:00")
        self.shift_timer_label.setAlignment(Qt.AlignCenter)
        self.shift_timer_label.setStyleSheet("font-size: 14px; color: #0069c0;")
        main_layout.addWidget(self.shift_timer_label)

        for group in STATUS_GROUPS:
            btn_layout = QHBoxLayout()
            btn_layout.setSpacing(10)
            for status in group:
                btn = QPushButton(status)
                btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
                btn.clicked.connect(lambda _, s=status: self.set_status(s))
                btn_layout.addWidget(btn)
                self.status_buttons[status] = btn
            main_layout.addLayout(btn_layout)

        self.finish_btn = QPushButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É")
        self.finish_btn.setStyleSheet("""
            QPushButton {
                padding: 10px;
                border-radius: 5px;
                background-color: #f44336;
                color: white;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        self.finish_btn.clicked.connect(self.finish_shift)
        main_layout.addWidget(self.finish_btn)

        self.setLayout(main_layout)
        self._update_button_states()

    def _init_timers(self):
        self.status_timer = QTimer(self)
        self.status_timer.timeout.connect(self._update_time_display)
        self.status_timer.start(1000)

        self.sync_timer = QTimer(self)
        self.sync_timer.timeout.connect(self._check_sync_status)
        self.sync_timer.start(60000)

    def _init_shift_check_timer(self):
        self.shift_check_timer = QTimer(self)
        self.shift_check_timer.timeout.connect(self._auto_check_shift_ended)
        self.shift_check_timer.start(30000)  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
        self._auto_check_shift_ended()

    def _is_session_finished_remote(self) -> bool:
        """
        True ‚Äî –µ—Å–ª–∏ –≤ ActiveSessions —Ç–µ–∫—É—â–∞—è (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ email) —Å–µ—Å—Å–∏—è
        –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'finished' –∏–ª–∏ 'kicked'.
        """
        try:
            if hasattr(sheets_api, "check_user_session_status"):
                st = str(sheets_api.check_user_session_status(self.email, self.session_id)).strip().lower()
                logger.debug(f"[ACTIVESESSIONS] status for {self.email}/{self.session_id}: {st}")
                if st in ("finished", "kicked"):
                    return True

            if hasattr(sheets_api, "get_all_active_sessions"):
                sessions = sheets_api.get_all_active_sessions() or []
                last_for_email = None
                for s in sessions:
                    if str(s.get("Email", "")).strip().lower() == self.email.lower():
                        last_for_email = s
                if last_for_email:
                    st2 = str(last_for_email.get("Status", "")).strip().lower()
                    logger.debug(f"[ACTIVESESSIONS] fallback status for {self.email}: {st2}")
                    return st2 in ("finished", "kicked")
        except Exception as e:
            logger.debug(f"_is_session_finished_remote error: {e}")
        return False

    def _auto_check_shift_ended(self):
        if self.shift_ended:
            return

        # 1) –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if self._is_shift_ended():
            self.shift_ended = True
            self.finish_btn.setEnabled(False)
            for btn in self.status_buttons.values():
                btn.setEnabled(False)
            self._show_notification("WorkLog", "–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ –¥–∞–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º—ã).")
            logger.info(f"[AUTO_LOGOUT_DETECT] –õ–æ–∫–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω LOGOUT –¥–ª—è {self.email}")
            return

        # 2) —É–¥–∞–ª—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ActiveSessions
        if self._is_session_finished_remote():
            logger.info(f"[AUTO_LOGOUT_DETECT] –í ActiveSessions —Å—Ç–∞—Ç—É—Å –ù–ï active –¥–ª—è {self.email}, session={self.session_id}")
            self._closing_reason = "auto_logout"
            self.finish_btn.setEnabled(False)
            for btn in self.status_buttons.values():
                btn.setEnabled(False)
            self._show_notification("WorkLog", "–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            try:
                self._log_shift_end("–†–∞–∑–ª–æ–≥–∏–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—É–¥–∞–ª—ë–Ω–Ω–æ)", reason="admin")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ª–æ–≥–∞—É—Ç–∞—Ö –ø–æ —Å–∏–≥–Ω–∞–ª—É –∏–∑ Sheets: {e}")
            self.shift_ended = True
            self.close()

    def _update_info_text(self):
        info_text = (
            f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {self.name}<br>"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {self.role}<br>"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {self.group}<br>"
            f"<b>–°–º–µ–Ω–∞:</b> {self.shift_hours}<br>"
            f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> <span style='color: #2e7d32;'>{self.current_status}</span>"
        )
        self.info_label.setText(info_text)
        self.status_changed.emit(self.current_status)
        self._update_button_states()

    def _update_button_states(self):
        for status, btn in self.status_buttons.items():
            if status == self.current_status:
                btn.setStyleSheet("""
                    QPushButton {
                        padding: 8px;
                        border-radius: 5px;
                        background-color: #b3ffb3;
                        font-weight: bold;
                        border: 2px solid #2e7d32;
                    }
                    QPushButton:hover {
                        background-color: #a1e6a1;
                    }
                """)
                btn.setEnabled(False)
            else:
                btn.setStyleSheet("""
                    QPushButton {
                        padding: 8px;
                        border-radius: 5px;
                        background-color: #e0e0e0;
                    }
                    QPushButton:hover {
                        background-color: #d0d0d0;
                    }
                """)
                btn.setEnabled(True)
            if self.shift_ended:
                btn.setEnabled(False)

    def _update_time_display(self):
        time_in_status = datetime.now() - self.status_start_time
        hours, remainder = divmod(time_in_status.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        self.time_label.setText(f"‚è± –í—Ä–µ–º—è –≤ —Å—Ç–∞—Ç—É—Å–µ: {hours:02d}:{minutes:02d}:{seconds:02d}")

        shift_time = datetime.now() - self.shift_start_time
        h, rem = divmod(shift_time.seconds, 3600)
        m, s = divmod(rem, 60)
        self.shift_timer_label.setText(f"‚è∞ –í—Ä–µ–º—è —Å–º–µ–Ω—ã: {h:02d}:{m:02d}:{s:02d}")

    def _check_sync_status(self):
        if self.last_sync_time:
            time_since_sync = datetime.now() - self.last_sync_time
            if time_since_sync > timedelta(hours=1):
                self._show_notification("WorkLog", "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å –±–æ–ª–µ–µ —á–∞—Å–∞")

    def _is_shift_ended(self) -> bool:
        try:
            return self.db.check_existing_logout(self.email, session_id=self.session_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: {e}")
            return False

    def set_status(self, new_status: str):
        if self.shift_ended:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return

        if new_status == self.current_status:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º —Å—Ç–∞—Ç—É—Å–µ.")
            return

        comment = self.comment_input.toPlainText().strip()

        try:
            now = datetime.now().isoformat()
            
            # --- –®–ê–ì 1: –Ø–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ü–û–°–õ–ï–î–ù–ò–ô —Å—Ç–∞—Ç—É—Å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è end_time ---
            # –ù–∞—Ö–æ–¥–∏–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (LOGIN –∏–ª–∏ STATUS_CHANGE)
            with self.db._lock:
                cursor = self.db.conn.execute(
                    "SELECT id, status FROM logs WHERE email=? AND session_id=? "
                    "AND status_end_time IS NULL "
                    "AND action_type IN ('LOGIN', 'STATUS_CHANGE') "
                    "ORDER BY id DESC LIMIT 1",
                    (self.email, self.session_id)
                )
                row = cursor.fetchone()
                if row:
                    prev_id, prev_status = row
                    # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    self.db.conn.execute(
                        "UPDATE logs SET status_end_time=? WHERE id=?",
                        (now, prev_id)
                    )
                    self.db.conn.commit()
                    logger.info(f"–°—Ç–∞—Ç—É—Å '{prev_status}' (id={prev_id}) –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {now}")
                    # –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (—á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏ —Ç.–ø.)
                    try:
                        from user_app import session as session_state
                        from user_app.personal_rules import on_status_committed
                        current_email = session_state.get_user_email()
                        if current_email:
                            on_status_committed(email=current_email, status_name=prev_status, ts_iso=None)
                    except Exception:
                        logger.exception("on_status_committed failed")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –≤ —Ñ–æ–Ω–µ
                    self._send_action_to_sheets(prev_id)
                else:
                    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è end_time")

            # --- –®–ê–ì 2: –õ–æ–≥–∏—Ä—É–µ–º –ù–û–í–´–ô —Å—Ç–∞—Ç—É—Å ---
            record_id = self.db.log_action(
                email=self.email,
                name=self.name,
                status=new_status,
                action_type="STATUS_CHANGE",
                comment=comment if comment else None,
                immediate_sync=False,
                session_id=self.session_id,
                status_start_time=now,
                status_end_time=None
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ñ–æ–Ω–µ
            self._send_action_to_sheets(record_id)
            
            # --- –®–ê–ì 3: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
            self.current_status = new_status
            self.status_start_time = datetime.fromisoformat(now)
            self.comment_input.clear()
            self._update_info_text()
            self._show_notification("WorkLog", f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

    def finish_shift(self):
        if self.shift_ended:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return

        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            try:
                result = self._log_shift_end("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ)", reason="user", group=self.group, sync=False)
                if result:
                    logger.info(f"[LOGOUT] –ó–∞–ø–∏—Å—å LOGOUT —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–ª—è {self.email}")
                else:
                    logger.warning(f"[LOGOUT] LOGOUT —É–∂–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è {self.email}")
                self.shift_ended = True
                self.finish_btn.setEnabled(False)
                for btn in self.status_buttons.values():
                    btn.setEnabled(False)
                try:
                    sheets_api.finish_active_session(self.email, self.session_id, datetime.now().isoformat())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ ActiveSessions: {e}")
                self.close()
            except LocalDBError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É: {e}")

    def force_logout_by_admin(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.shift_ended:
            logger.info(f"[ADMIN_LOGOUT] –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–º–µ–Ω—É: {self.email}")
            return
            
        self._closing_reason = "admin_logout"
        self.finish_btn.setEnabled(False)
        for btn in self.status_buttons.values():
            btn.setEnabled(False)
            
        try:
            # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–∏—à–µ–º —Å—Ç–∞—Ç—É—Å+LOGOUT –≤ WorkLog_–ì—Ä—É–ø–ø–∞
            self._log_shift_end("–†–∞–∑–ª–æ–≥–∏–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reason="admin",
                                group=self.group, sync=True)
            # –∏ —Å—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º ActiveSessions –∫–∞–∫ "kicked"
            try:
                sheets_api.kick_active_session(self.email, self.session_id, datetime.now().isoformat())
            except Exception as e:
                logger.error(f"kick_active_session error: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–¥–º–∏–Ω—Å–∫–æ–º –≤—ã—Ö–æ–¥–µ: {e}")
            if self.on_logout_callback:
                self.on_logout_callback()

        self.shift_ended = True

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ (–Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ)
        QMessageBox.information(
            self,
            "–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            "–í–∞—à–∞ —Å–º–µ–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ."
        )

        self.close()

    def _log_shift_end(self, comment: str, reason: str = "user", 
                       group: Optional[str] = None, sync: bool = False) -> bool:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–º–µ–Ω—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç LOGOUT.
        :param comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã—Ö–æ–¥—É.
        :param reason: –ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞ (user, admin, auto).
        :param group: –ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞ –≤ Google Sheets).
        :param sync: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (True –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –≤—ã—Ö–æ–¥–∞).
        """
        try:
            if self._is_shift_ended():
                logger.warning(f"[LOGOUT] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ LOGOUT –¥–ª—è {self.email} ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
                return False

            # 1) –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            prev_id = self.db.finish_last_status(self.email, self.session_id)
            if prev_id:
                if sync:
                    row = self.db.get_action_by_id(prev_id)
                    action = self._make_action_payload_from_row(row)
                    if sheets_api.log_user_actions([action], self.email, user_group=group or self.group):
                        self.db.mark_actions_synced([prev_id])
                else:
                    self._send_action_to_sheets(prev_id, user_group=group or self.group)

            # 2) –∑–∞–ø–∏—Å–∞—Ç—å LOGOUT
            now = datetime.now().isoformat()
            record_id = self.db.log_action(
                email=self.email,
                name=self.name,
                status="–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                action_type="LOGOUT",
                comment=comment,
                immediate_sync=False,
                session_id=self.session_id,
                status_start_time=now,
                status_end_time=now,
                reason=reason,
                user_group=group or self.group
            )

            if sync:
                row2 = self.db.get_action_by_id(record_id)
                action2 = self._make_action_payload_from_row(row2)
                if sheets_api.log_user_actions([action2], self.email, user_group=group or self.group):
                    self.db.mark_actions_synced([record_id])
            else:
                self._send_action_to_sheets(record_id, user_group=group or self.group)

            self.last_sync_time = datetime.now()
            self._check_sync_status()
            logger.info(f"[LOGOUT] –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.email}. –ü—Ä–∏—á–∏–Ω–∞: {comment}, reason={reason}")

            if self.on_logout_callback:
                self.on_logout_callback()
                
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ LOGOUT: {e}")
            return False

    def closeEvent(self, event):
        if self._closing_reason == "admin_logout":
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            event.accept()
            self._closing_reason = None
            return

        if self._closing_reason == "auto_logout":
            # –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            event.accept()
            self._closing_reason = None
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –≤—Ä—É—á–Ω—É—é
        reply = QMessageBox.question(
            self,
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ? –°–º–µ–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞...',
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            self._closing_reason = "user_close"
            try:
                self._log_shift_end("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ –∫—Ä–µ—Å—Ç–∏–∫", reason="user", group=self.group, sync=False)
                sheets_api.finish_active_session(self.email, self.session_id, datetime.now().isoformat())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            self.shift_ended = True
            event.accept()
            self._closing_reason = None
        else:
            event.ignore()