# sync/service_alerts.py
from __future__ import annotations
import logging
from typing import Optional
from telegram_bot.notifier import TelegramNotifier
from config import SERVICE_ALERTS_ENABLED, SERVICE_ALERT_MIN_SECONDS

log = logging.getLogger(__name__)

_last: dict[str, float] = {}

def _should_skip(key: str, now_ts: float, min_gap: int) -> bool:
    last = _last.get(key, 0.0)
    if now_ts - last < min_gap:
        return True
    _last[key] = now_ts
    return False

def alert_sync_error(err_text: str, now_ts: float) -> None:
    """–ü–æ–∑–æ–≤–∏—Ç–µ –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π/–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –æ—à–∏–±–∫–µ —Ü–∏–∫–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    if not SERVICE_ALERTS_ENABLED:
        return
    key = "sync_error"
    if _should_skip(key, now_ts, SERVICE_ALERT_MIN_SECONDS):
        return
    n = TelegramNotifier()
    n.send_service(f"üõ†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n<code>{(err_text or '').strip()[:500]}</code>")

def alert_queue_size(queue_len: int, threshold: int, now_ts: float) -> None:
    """
    –ü–æ–∑–æ–≤–∏—Ç–µ, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π > threshold.
    –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—á–∏—Ç–∞–π—Ç–µ –µ—ë –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–µ–ø—É—à–Ω—É—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    """
    if not SERVICE_ALERTS_ENABLED:
        return
    if queue_len <= threshold:
        return
    key = "sync_queue_over"
    if _should_skip(key, now_ts, SERVICE_ALERT_MIN_SECONDS):
        return
    n = TelegramNotifier()
    n.send_service(f"üõ†Ô∏è –û—á–µ—Ä–µ–¥—å —Å–∏–Ω–∫–∞ –≤—ã—Ä–æ—Å–ª–∞: {queue_len} (–ø–æ—Ä–æ–≥ {threshold}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ/–∫–≤–æ—Ç—ã.")
